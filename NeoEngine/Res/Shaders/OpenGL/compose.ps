

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform sampler2D tex3;
uniform sampler2D tex4;
uniform sampler2D tex5;
uniform sampler2D tex6;
uniform sampler2D tex7;
uniform samplerCube texCube0;
uniform samplerCube texCube1;


in vec2 oUv;

layout(location = 0) out vec4 Frag0;

//--------------------------------------------------------------------------------------
/// ComposePS
//--------------------------------------------------------------------------------------

void main()
{
	vec3 vNormal = texture(tex1, oUv).xyz;
	vNormal = normalize(Expand(vNormal));

	vec3 vWorldPos = ReconstructWorldPos(tex3, oUv);
	vec3 vView = normalize(camPos - vWorldPos);

	// Sun light
	float fNdotL = saturate(dot(vNormal, lightDirection));
	vec4 cDiffuse = fNdotL * lightColor;

	vec4 specGloss = texture(tex2, oUv);
	vec3 cSpecular = PhysicalBRDF(vNormal, vView, lightDirection, specGloss.w, specGloss.xyz);

	vec4 albedo = texture(tex0, oUv);
	albedo.xyz = albedo.xyz * albedo.xyz;

	vec4 oColor = albedo * cDiffuse;
	oColor.xyz += cSpecular * lightColor.xyz * fNdotL;

	// Shadow
	vec4 vShadow = ComputeShadow(vWorldPos, ShadowTransform, ShadowTransform2, ShadowTransform3, shadowMapTexelSize, tex4, tex5, tex6);
	oColor *= vShadow;

#ifdef AMBIENT_CUBE
	// Ambient
	vec4 vAmbientDiff, vAmbientSpec;
	float fAmbDiffStrength = 0.3f, fAmbSpecStrength = 0.3f;
	ComputeAmbientCube(vAmbientDiff, vAmbientSpec, texCube0, texCube1, tex7, vView, vNormal, specGloss.xyz, specGloss.w);

	oColor += vAmbientSpec * fAmbSpecStrength + vAmbientDiff * albedo * fAmbDiffStrength;
#endif

	Frag0 = oColor;
}