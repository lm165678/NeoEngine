
uniform cbufferCustom0
{
	mat4	matRotation;
	float	fClipDistance;
};

uniform sampler2D	tex0;			// diffuse map
uniform sampler2D	tex1;			// normal map
uniform sampler2D	tex10;			// scene depth map

in vec2 oUv;
in vec3 oWPos;
in vec3 oNormal;

layout(location = 0) out vec4 Frag0;
layout(location = 1) out vec4 Frag1;
layout(location = 2) out vec4 Frag2;

//--------------------------------------------------------------------------------------
// PS for g-buffer generation
//--------------------------------------------------------------------------------------
void main()
{
	vec2 screenTC = gl_FragCoord.xy / frameBufferSize.xy;
	screenTC.y = 1 - screenTC.y;

	vec3 vWorldPos = ReconstructWorldPos(tex10, screenTC);
	vec4 vObjPos = vec4(vWorldPos, 1) * InvWorld;

	// Projecing 3d box to 2d plane
	if(abs(vObjPos.x) > 0.5f || abs(vObjPos.y) > 0.5f || abs(vObjPos.z) > 0.5f)
		discard;

	// [-0.5, 0.5] -> [0, 1]
	vObjPos = vec4(vObjPos.xyz, 0) * matRotation;
	vec2 fUv = vObjPos.xz + 0.5f;
	fUv.y = 1 - fUv.y;

	if(fClipDistance - abs(vObjPos.y) < 0)
		discard;

	// Avoid precision problem, decode in ComposePass.
	vec4 albedo = texture(tex0, fUv);
	albedo.xyz = sqrt(albedo.xyz);
	Frag1 = albedo;

#ifdef NORMAL_MAP
	vec3 vNormal = normalize(oNormal);
	vec3 vView = normalize(camPos - oWPos);
	vec3 tangent, binormal;
	cotangent_frame(vView, oUv, tangent, binormal);

	mat3 matTSToWS = mat3(tangent, binormal, vNormal);
	vec3 vNormalTS = GetNormalFromTexture(tex1, oUv);
	vec3 vWorldNormal = normalize(vNormalTS * matTSToWS);

	Frag0.xyz = vWorldNormal * 0.5f + 0.5f;
	Frag0.w = albedo.w;
#else
	Frag0 = vec4(0, 0, 0, 0);
#endif

#ifdef SPEC_MAP
	Frag2.xyz = texture(tex2, oUv).xyz;
	Frag2.w = specularGloss.w;
#else
	Frag2 = specularGloss;
#endif
}