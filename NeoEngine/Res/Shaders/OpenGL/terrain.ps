
uniform sampler2D	tex0;	// globalNormal
uniform sampler2D	tex1;	// blendTex0
uniform sampler2D	tex2;	// difftex0
uniform sampler2D	tex3;	// normtex0
uniform sampler2D	tex4;	// difftex1
uniform sampler2D	tex5;	// normtex1
uniform sampler2D	tex6;	// difftex2
uniform sampler2D	tex7;	// normtex2

in vec4 oWPos;
in vec4 oUVMisc;
in vec4 oUV0;
in vec4 oUV1;

layout(location = 0) out vec4 Frag0;
layout(location = 1) out vec4 Frag1;
layout(location = 2) out vec4 Frag2;

//--------------------------------------------------------------------------------------
// PS for g-buffer generation
//--------------------------------------------------------------------------------------
void main()
{
	vec4 outputCol = vec4(0,0,0,1);
	vec2 uv = oUVMisc.xy;
	vec3 normal = Expand(texture(tex0, uv)).rgb;

	vec3 diffuse = vec3(0,0,0);
	float specular = 0;
	vec4 blendTexVal0 = texture(tex1, uv);

	vec3 tangent = vec3(1, 0, 0);
	vec3 binormal = normalize(cross(tangent, normal));
	tangent = normalize(cross(normal, binormal));
	mat3 TBN = mat3(tangent, binormal, normal);

	vec4 litRes, litResLayer;
	vec3 TSlightDir, TSeyeDir, TShalfAngle, TSnormal;
	float displacement;
	vec4 scaleBiasSpecular = vec4(0.03f, -0.04f, 32.f, 1.f);
	vec2 uv0 = oUV0.xy;
	displacement = texture(tex3, uv0).a * scaleBiasSpecular.x + scaleBiasSpecular.y;
	//uv0 += TSeyeDir.xy * displacement;
	TSnormal = Expand(texture(tex3, uv0)).rgb;
	vec3 vWorldNormal = TBN * TSnormal;
	vWorldNormal = (vec4(vWorldNormal, 0) * World).xyz;

	vec4 diffuseSpecTex0 = texture(tex2, uv0);
	diffuse = diffuseSpecTex0.rgb;
	specular = diffuseSpecTex0.a;

	vec2 uv1 = oUV0.zw;
	displacement = texture(tex5, uv1).a * scaleBiasSpecular.x + scaleBiasSpecular.y;
	//uv1 += TSeyeDir.xy * displacement;
	TSnormal = Expand(texture(tex5, uv1)).rgb;
	TSnormal = TBN * TSnormal;
	vWorldNormal += (vec4(TSnormal, 0) * World).xyz;

	vec4 diffuseSpecTex1 = texture(tex4, uv1);
	diffuse = mix(diffuse, diffuseSpecTex1.rgb, blendTexVal0.r);
	specular = mix(specular, diffuseSpecTex1.a, blendTexVal0.r);

	vec2 uv2 = oUV1.xy;
	displacement = texture(tex7, uv2).a * scaleBiasSpecular.x + scaleBiasSpecular.y;
	//uv2 += TSeyeDir.xy * displacement;
	TSnormal = Expand(texture(tex7, uv2)).rgb;
	TSnormal = TBN * TSnormal;
	vWorldNormal += (vec4(TSnormal, 0) * World).xyz;

	vec4 diffuseSpecTex2 = texture(tex6, uv2);
	diffuse = mix(diffuse, diffuseSpecTex2.rgb, blendTexVal0.g);
	specular = mix(specular, diffuseSpecTex2.a, blendTexVal0.g);

	Frag0.xyz = normalize(vWorldNormal) * 0.5f + 0.5f;
	Frag0.w = 1.0f;
	Frag1 = vec4(diffuse, 1.0f);
	Frag2 = vec4(0.05f, 0.05f, 0.05f, 0.02f);
}